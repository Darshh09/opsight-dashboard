// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  subscription Subscription?
  usageTracking UsageTracking?
  alertRules AlertRule[]
  csvUploads CsvUpload[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id                String            @id @default(cuid())
  userId            String            @unique
  stripeCustomerId  String?           @unique
  stripeSubscriptionId String?        @unique
  status            SubscriptionStatus @default(TRIAL)
  plan              SubscriptionPlan  @default(PILOT)
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean          @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UsageTracking {
  id                String   @id @default(cuid())
  userId            String   @unique
  aiQueriesUsed     Int      @default(0)
  alertRulesCreated Int      @default(0)
  csvFilesUploaded  Int      @default(0)
  lastResetDate     DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AlertRule {
  id          String   @id @default(cuid())
  userId      String
  name        String
  metric      String
  threshold   Float
  condition   String   // 'above' or 'below'
  channel     String   // 'email' or 'slack'
  recipients  String[]
  status      String   @default("active")
  lastTriggered DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CsvUpload {
  id        String   @id @default(cuid())
  userId    String
  fileName  String
  fileSize  Int
  status    String   @default("uploaded")
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id                String   @id @default(cuid())
  userId            String
  stripePaymentId   String?  @unique
  paypalPaymentId   String?
  razorpayPaymentId String?
  amount            Float
  currency          String   @default("usd")
  status            String
  plan              String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
}

enum SubscriptionPlan {
  PILOT
  BASIC
  PRO
  ENTERPRISE
}
